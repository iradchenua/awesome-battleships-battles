<script>
    class SpaceShip {
        constructor(params) {
            for (let prop in params) {
                if (params.hasOwnProperty(prop)) {
                    this[prop] = params[prop];
                }
            }
            this.image = new Image();
            this.image.src = this.img;
            this.image.onload = this.draw.bind(this);
        }
        draw() {
            this.drawer.drawShip(this);
        }

        getAngle() {
            if (this.dirX === 0) {
                return this.dirY === 1 ? -Math.PI / 2 : Math.PI / 2;
            }
            else {
                return this.dirX === 1 ? 0 : Math.PI;
            }
        }
    }

    class Drawer {
        constructor(params) {
            this.canvas = params.canvas;
            this.ctx = this.canvas.getContext('2d',  { alpha: false });
            this.xStep = this.canvas.width / params.gameFieldWidth;
            this.yStep = this.canvas.height / params.gameFieldHeight;
            this.gameFieldWidth = params.gameFieldWidth;
            this.gameFieldHeight = params.gameFieldHeight;

            //this.drawGrid();
        }
        drawGrid() {
            const canvas = this.canvas;
            this.ctx.strokeStyle = "#FFFFFF";
            for(let x = 0; x < canvas.width ; x += this.xStep)
                this.ctx.strokeRect(x, 0, this.xStep, canvas.height);
            for(let y = 0; y < canvas.width ; y += this.yStep)
                this.ctx.strokeRect(0, y, canvas.width, this.yStep);
        }
        xToCanvasCords(x) {
            return this.xStep * (x + this.gameFieldWidth / 2);
        }
        yToCanvasCords(y) {
            return this.yStep * (-y +  this.gameFieldHeight / 2);
        }
        drawShip(ship) {

            let width = ship.width;
            let height = ship.height;
            let x = this.xToCanvasCords(ship.x);
            let y = this.yToCanvasCords(ship.y);

            this.ctx.save();


            width *= this.xStep;
            height *= this.yStep;

           this.ctx.translate(x + width / 2, y + height / 2);
            this.ctx.rotate(ship.getAngle());

            x = -width / 2;
            y = -height / 2;


            this.ctx.strokeStyle = ship.name.split('ship')[0];
            this.ctx.strokeRect(x, y,
                width,height);
            this.ctx.drawImage(ship.image,
                                x, y,
                                width, height);
            this.ctx.restore();
        }
    }

    function parseJSON(str) {
        return (JSON.parse(str.replace(/&quot;|\\&quot;/g, '"')));
    }

    $(document).ready(function() {

        const jsInfo = $('#jsInfo');

        const GAME_FIELD_WIDTH = jsInfo.data('gameFieldWidth');
        const GAME_FIELD_HEIGHT = jsInfo.data('gameFieldHeight');

        const drawer = new Drawer({
            "canvas": $('#cnv').get(0),
            "gameFieldWidth": GAME_FIELD_WIDTH,
            "gameFieldHeight": GAME_FIELD_HEIGHT
        });

        const shipsFromServer = parseJSON("{{ ships }}");
        const ships = [];
        console.log(shipsFromServer);
        for(let prop in shipsFromServer) {
            if (shipsFromServer.hasOwnProperty(prop)) {
                shipsFromServer[prop].forEach(function(shipParams) {
                    shipParams.drawer = drawer;
                    ships.push(new SpaceShip(shipParams));
                });
            }
        }
    });
</script>